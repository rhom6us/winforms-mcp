name: Publish

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-and-publish:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Extract version
      id: version
      run: |
        $version = Get-Content -Path "VERSION" -ErrorAction SilentlyContinue
        if (-not $version) {
          $version = "1.0.0"
        }
        $version = $version.Trim()
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"
      shell: pwsh

    - name: Restore dependencies
      run: dotnet restore Rhombus.WinFormsMcp.sln

    - name: Build
      run: dotnet build Rhombus.WinFormsMcp.sln --configuration Release --no-restore

    - name: Run tests
      run: dotnet test Rhombus.WinFormsMcp.sln --configuration Release --no-build --logger "console;verbosity=minimal"

    # Publish to NuGet
    - name: Pack NuGet
      run: dotnet pack src/Rhombus.WinFormsMcp.Server/Rhombus.WinFormsMcp.Server.csproj --configuration Release --output ./nupkg --version-suffix ""

    - name: Publish to NuGet (Trusted Publishing)
      run: dotnet nuget push "./nupkg/*.nupkg" --source https://api.nuget.org/v3/index.json --skip-duplicate
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.NUGET_TRUSTED_PUBLISHING_TOKEN }}

    # Build NPM package distribution
    - name: Create NPM distribution
      run: |
        mkdir -p npm/bin
        mkdir -p npm/dist
        # Copy the compiled server to npm/dist
        Copy-Item -Path "src/Rhombus.WinFormsMcp.Server/bin/Release/net8.0-windows/Rhombus.WinFormsMcp.Server.exe" -Destination "npm/dist/"
        Copy-Item -Path "src/Rhombus.WinFormsMcp.Server/bin/Release/net8.0-windows/*.dll" -Destination "npm/dist/"
      shell: pwsh

    # Publish to NPM
    - name: Publish to NPM
      run: |
        npm config set @rhom6us:registry https://registry.npmjs.org/
        npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
        cd npm
        npm publish --access public
      if: secrets.NPM_TOKEN != ''

    # Build and push Docker image
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != ''

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != '' }}
        tags: |
          rhom6us/winforms-mcp:latest
          rhom6us/winforms-mcp:${{ steps.version.outputs.VERSION }}
        cache-from: type=registry,ref=rhom6us/winforms-mcp:buildcache
        cache-to: type=registry,ref=rhom6us/winforms-mcp:buildcache,mode=max
      if: secrets.DOCKER_USERNAME != '' && secrets.DOCKER_PASSWORD != ''

    # Create GitHub Release
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}
        release_name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          ## Rhombus.WinFormsMcp ${{ steps.version.outputs.VERSION }}

          ### Releases
          - **NuGet**: `Rhombus.WinFormsMcp` v${{ steps.version.outputs.VERSION }}
          - **NPM**: `@rhom6us/winforms-mcp` v${{ steps.version.outputs.VERSION }}
          - **Docker**: `rhom6us/winforms-mcp:${{ steps.version.outputs.VERSION }}`

          ### Installation

          #### NuGet
          ```
          Install-Package Rhombus.WinFormsMcp -Version ${{ steps.version.outputs.VERSION }}
          ```

          #### NPM
          ```
          npm install @rhom6us/winforms-mcp@${{ steps.version.outputs.VERSION }}
          npx @rhom6us/winforms-mcp
          ```

          #### Docker
          ```
          docker run rhom6us/winforms-mcp:${{ steps.version.outputs.VERSION }}
          ```
        draft: false
        prerelease: false
      if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
