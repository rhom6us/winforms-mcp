name: Publish

on:
  push:
    branches: [ master, main ]
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  bump-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/')
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Bump patch version
      id: bump
      run: |
        # Read current version
        CURRENT_VERSION=$(cat VERSION)
        echo "Current version: $CURRENT_VERSION"

        # Parse version components
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

        # Increment patch version
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"

        echo "New version: $NEW_VERSION"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

        # Write new version to file
        echo "$NEW_VERSION" > VERSION
        echo "VERSION file updated to $NEW_VERSION"

    - name: Commit version bump and create tag
      if: steps.bump.outputs.new_version != ''
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add VERSION
        git commit -m "chore: bump version to ${{ steps.bump.outputs.new_version }}"
        git tag "v${{ steps.bump.outputs.new_version }}"
        git push
        git push origin "v${{ steps.bump.outputs.new_version }}"

  build-and-publish:
    runs-on: windows-2022
    needs: bump-version
    if: always()  # Run even if bump-version is skipped (e.g., on tag pushes)
    permissions:
      id-token: write  # Enable GitHub OIDC token issuance for NuGet trusted publishing

    steps:
    - uses: actions/checkout@v4
      with:
        ref: master  # Always check out master to get latest VERSION

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Extract version
      id: version
      run: |
        $version = Get-Content -Path "VERSION" -ErrorAction SilentlyContinue
        if (-not $version) {
          $version = "1.0.0"
        }
        $version = $version.Trim()
        echo "VERSION=$version" >> $env:GITHUB_OUTPUT
        echo "Version: $version"
      shell: pwsh

    - name: Restore dependencies
      run: dotnet restore Rhombus.WinFormsMcp.sln

    - name: Build
      run: dotnet build Rhombus.WinFormsMcp.sln --configuration Release --no-restore

    - name: Run tests
      run: dotnet test Rhombus.WinFormsMcp.sln --configuration Release --no-build --logger "console;verbosity=minimal"

    # Step 1: Create GitHub Release
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.VERSION }}
        release_name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          ## Rhombus.WinFormsMcp ${{ steps.version.outputs.VERSION }}

          ### Releases
          - **NuGet**: `Rhombus.WinFormsMcp` v${{ steps.version.outputs.VERSION }}
          - **NPM**: `@rhom6us/winforms-mcp` v${{ steps.version.outputs.VERSION }}
          - **Docker**: `rhom6us/winforms-mcp:${{ steps.version.outputs.VERSION }}`

          ### Installation

          #### NuGet
          ```
          Install-Package Rhombus.WinFormsMcp -Version ${{ steps.version.outputs.VERSION }}
          ```

          #### NPM
          ```
          npm install @rhom6us/winforms-mcp@${{ steps.version.outputs.VERSION }}
          npx @rhom6us/winforms-mcp
          ```

          #### Docker
          ```
          docker run rhom6us/winforms-mcp:${{ steps.version.outputs.VERSION }}
          ```
        draft: false
        prerelease: false
      if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'

    # Step 2: Build and push Docker image (optional - skipped if secrets missing)
    # NOTE: Docker publishing is currently disabled due to buildkit manifest compatibility issues
    # with GitHub Actions runners. Will be re-enabled when buildkit supports Windows Server 2022.
    # For now, users can manually build and push using: docker build -t rhom6us/winforms-mcp:VERSION .
    #
    # - name: Set up Docker Buildx
    #   uses: docker/setup-buildx-action@v3
    #   if: env.DOCKER_USERNAME != '' && env.DOCKER_PASSWORD != ''
    #   env:
    #     DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    #     DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    #
    # - name: Login to Docker Hub
    #   uses: docker/login-action@v3
    #   with:
    #     username: ${{ secrets.DOCKER_USERNAME }}
    #     password: ${{ secrets.DOCKER_PASSWORD }}
    #   if: env.DOCKER_USERNAME != '' && env.DOCKER_PASSWORD != ''
    #   env:
    #     DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    #     DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    #
    # - name: Build and push Docker image
    #   uses: docker/build-push-action@v5
    #   with:
    #     context: .
    #     push: ${{ env.DOCKER_USERNAME != '' && env.DOCKER_PASSWORD != '' }}
    #     tags: |
    #       rhom6us/winforms-mcp:latest
    #       rhom6us/winforms-mcp:${{ steps.version.outputs.VERSION }}
    #     cache-from: type=registry,ref=rhom6us/winforms-mcp:buildcache
    #     cache-to: type=registry,ref=rhom6us/winforms-mcp:buildcache,mode=max
    #   if: env.DOCKER_USERNAME != '' && env.DOCKER_PASSWORD != ''
    #   env:
    #     DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    #     DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    # Step 3: Publish to NPM
    - name: Create NPM distribution
      run: |
        mkdir -p npm/bin
        mkdir -p npm/dist
        # Copy the compiled server exe and dlls to npm/dist
        $exeFile = Get-ChildItem -Path "src/Rhombus.WinFormsMcp.Server/bin/Release/net8.0-windows" -Filter "Rhombus.WinFormsMcp.Server.exe" | Select-Object -First 1
        $dllFiles = Get-ChildItem -Path "src/Rhombus.WinFormsMcp.Server/bin/Release/net8.0-windows" -Filter "*.dll"
        if ($exeFile) {
          Copy-Item -Path $exeFile.FullName -Destination "npm/dist/" -Force
          Write-Host "Copied $($exeFile.Name) to npm/dist/"
        }
        foreach ($dll in $dllFiles) {
          Copy-Item -Path $dll.FullName -Destination "npm/dist/" -Force
          Write-Host "Copied $($dll.Name) to npm/dist/"
        }
      shell: pwsh

    - name: Publish to NPM
      run: |
        npm config set @rhom6us:registry https://registry.npmjs.org/
        npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
        cd npm
        npm publish --access public || echo "Package already published or publish failed, continuing..."
      if: env.NPM_TOKEN != '' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      continue-on-error: true

    # Step 4: Publish to NuGet using Trusted Publishing
    - name: Create NuGet output directory
      run: mkdir -p nupkg
      shell: pwsh

    - name: Copy NuGet package
      run: |
        $nupkg = Get-ChildItem -Path "src/Rhombus.WinFormsMcp.Server/bin/Release" -Filter "Rhombus.WinFormsMcp.*.nupkg" | Select-Object -First 1
        if ($nupkg) {
          Copy-Item -Path $nupkg.FullName -Destination "nupkg/" -Force
          Write-Host "Copied $($nupkg.Name) to nupkg/"
        } else {
          throw "No .nupkg file found matching pattern Rhombus.WinFormsMcp.*.nupkg"
        }
      shell: pwsh

    - name: NuGet login (OIDC â†’ temp API key)
      uses: NuGet/login@v1
      id: nuget-login
      with:
        user: butler.software

    - name: Publish to NuGet
      run: |
        $nupkg = Get-ChildItem -Path "nupkg" -Filter "*.nupkg" | Select-Object -First 1
        if ($nupkg) {
          Write-Host "Publishing $($nupkg.Name) to NuGet..."
          dotnet nuget push $nupkg.FullName --api-key ${{ steps.nuget-login.outputs.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
        } else {
          throw "No .nupkg file found in nupkg directory"
        }
      shell: pwsh
